// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
	"time"

	crawlerModel "sprm-crawler/crawler/models"
)

const getUnscrappedUrlFrontiers = `-- name: GetUnscrappedUrlFrontiers :many
SELECT id, domain, url, crawler, status, metadata, created_at, updated_at
FROM url_frontiers
WHERE
  crawler = $1
  AND status = $2
ORDER BY url ASC LIMIT $3
`

type GetUnscrappedUrlFrontiersParams struct {
	Crawler string
	Status  int16
	Limit   int32
}

func (q *Queries) GetUnscrappedUrlFrontiers(ctx context.Context, arg GetUnscrappedUrlFrontiersParams) ([]UrlFrontier, error) {
	rows, err := q.db.Query(ctx, getUnscrappedUrlFrontiers, arg.Crawler, arg.Status, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []UrlFrontier
	for rows.Next() {
		var i UrlFrontier
		if err := rows.Scan(
			&i.ID,
			&i.Domain,
			&i.Url,
			&i.Crawler,
			&i.Status,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlFrontierById = `-- name: GetUrlFrontierById :one
SELECT id, domain, url, crawler, status, metadata, created_at, updated_at
FROM url_frontiers
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUrlFrontierById(ctx context.Context, id string) (UrlFrontier, error) {
	row := q.db.QueryRow(ctx, getUrlFrontierById, id)
	var i UrlFrontier
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Url,
		&i.Crawler,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUrlFrontierByUrl = `-- name: GetUrlFrontierByUrl :one
SELECT id, domain, url, crawler, status, metadata, created_at, updated_at
FROM url_frontiers
WHERE url = $1
LIMIT 1
`

func (q *Queries) GetUrlFrontierByUrl(ctx context.Context, url string) (UrlFrontier, error) {
	row := q.db.QueryRow(ctx, getUrlFrontierByUrl, url)
	var i UrlFrontier
	err := row.Scan(
		&i.ID,
		&i.Domain,
		&i.Url,
		&i.Crawler,
		&i.Status,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertUrlFrontier = `-- name: UpsertUrlFrontier :exec
INSERT INTO url_frontiers (id, domain, url, crawler, status, metadata, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (id) DO UPDATE
SET
  domain = $2,
  url = $3,
  crawler = $4,
  metadata = $6,
  updated_at = $7
`

type UpsertUrlFrontierParams struct {
	ID        string
	Domain    string
	Url       string
	Crawler   string
	Status    int16
	Metadata  crawlerModel.UrlFrontierMetadata
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpsertUrlFrontier(ctx context.Context, arg UpsertUrlFrontierParams) error {
	_, err := q.db.Exec(ctx, upsertUrlFrontier,
		arg.ID,
		arg.Domain,
		arg.Url,
		arg.Crawler,
		arg.Status,
		arg.Metadata,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
